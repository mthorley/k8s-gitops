---
# Source: tetragon/templates/serviceaccount.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: tetragon
  namespace: kube-system
  labels:
    helm.sh/chart: tetragon-0.11.0
    app.kubernetes.io/name: tetragon
    app.kubernetes.io/instance: tetragon
    app.kubernetes.io/managed-by: Helm
---
# Source: tetragon/templates/operator_configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: tetragon-operator-config
  namespace: kube-system
  labels:
    helm.sh/chart: tetragon-0.11.0
    app.kubernetes.io/name: "tetragon-operator"
    app.kubernetes.io/instance: tetragon
    app.kubernetes.io/managed-by: Helm
data:
  skip-crd-creation: "false"
  skip-tetragon-pod-crd: "true"
---
# Source: tetragon/templates/tetragon_configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: tetragon-config
  namespace: kube-system
  labels:
    helm.sh/chart: tetragon-0.11.0
    app.kubernetes.io/name: tetragon
    app.kubernetes.io/instance: tetragon
    app.kubernetes.io/managed-by: Helm
data:
  procfs: /procRoot
  enable-process-cred: "false"
  enable-process-ns: "false"
  process-cache-size: "65536"
  export-filename: /var/run/cilium/tetragon/tetragon.log
  export-file-max-size-mb: "10"
  export-file-max-backups: "5"
  export-file-compress: "false"
  export-allowlist: |-
    {"event_set":["PROCESS_EXEC", "PROCESS_EXIT", "PROCESS_KPROBE", "PROCESS_UPROBE"]}
  export-denylist: |-
    {"health_check":true}
    {"namespace":["", "cilium", "kube-system"]}
  field-filters: |-
    {}
  export-rate-limit: "-1"
  enable-k8s-api: "true"
  metrics-server: :2112
  server-address: localhost:54321
  gops-address: localhost:8118
---
# Source: tetragon/templates/clusterrole.yaml
kind: ClusterRole
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: tetragon
  labels:
    helm.sh/chart: tetragon-0.11.0
    app.kubernetes.io/name: tetragon
    app.kubernetes.io/instance: tetragon
    app.kubernetes.io/managed-by: Helm
rules:
  - apiGroups:
      - ""
    resources:
      - pods
      - services
    verbs:
      - get
      - list
      - watch
  - apiGroups:
      - cilium.io
    resources:
      - tracingpolicies
      - tracingpoliciesnamespaced
    verbs:
      - get
      - list
      - watch
  # We need to split out the create permission and enforce it without resourceNames since
  # the name would not be known at resource creation time
  - apiGroups:
      - apiextensions.k8s.io
    resources:
      - customresourcedefinitions
    verbs:
      - create
  - apiGroups:
      - apiextensions.k8s.io
    resources:
      - customresourcedefinitions
    verbs:
      - create
  - apiGroups:
      - apiextensions.k8s.io
    resources:
      - customresourcedefinitions
    resourceNames:
      - tracingpolicies.cilium.io
      - tracingpoliciesnamespaced.cilium.io
      - podinfo.cilium.io
    verbs:
      - update
      - get
      - list
---
# Source: tetragon/templates/clusterrolebinding.yml
kind: ClusterRoleBinding
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: tetragon
  labels:
    helm.sh/chart: tetragon-0.11.0
    app.kubernetes.io/name: tetragon
    app.kubernetes.io/instance: tetragon
    app.kubernetes.io/managed-by: Helm
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: tetragon
subjects:
  - kind: ServiceAccount
    namespace: kube-system
    name: tetragon
---
# Source: tetragon/templates/operator_clusterrolebinding.yaml
kind: ClusterRoleBinding
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: tetragon-operator-rolebinding
  labels:
    helm.sh/chart: tetragon-0.11.0
    app.kubernetes.io/name: "tetragon-operator"
    app.kubernetes.io/instance: tetragon
    app.kubernetes.io/managed-by: Helm
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: tetragon-operator-role
subjects:
  - kind: ServiceAccount
    namespace: kube-system
    name: tetragon-operator-service-account
---
# Source: tetragon/templates/service.yaml
apiVersion: v1
kind: Service
metadata:
  labels:
    helm.sh/chart: tetragon-0.11.0
    app.kubernetes.io/name: tetragon
    app.kubernetes.io/instance: tetragon
    app.kubernetes.io/managed-by: Helm
  name: tetragon
  namespace: kube-system
spec:
  ports:
    - name: metrics
      port: 2112
      protocol: TCP
      targetPort: 2112
  selector:
    helm.sh/chart: tetragon-0.11.0
    app.kubernetes.io/name: tetragon
    app.kubernetes.io/instance: tetragon
    app.kubernetes.io/managed-by: Helm
  type: ClusterIP
---
# Source: tetragon/templates/daemonset.yaml
apiVersion: apps/v1
kind: DaemonSet
metadata:
  labels:
    helm.sh/chart: tetragon-0.11.0
    app.kubernetes.io/name: tetragon
    app.kubernetes.io/instance: tetragon
    app.kubernetes.io/managed-by: Helm
  name: tetragon
  namespace: kube-system
spec:
  selector:
    matchLabels:
      app.kubernetes.io/name: tetragon
      app.kubernetes.io/instance: tetragon
  template:
    metadata:
      annotations:
        checksum/configmap: 0046c533361aa2a1a40416c77311419f804f04f4c9d88cbe2bbe948e3b9b49be
      labels:
        helm.sh/chart: tetragon-0.11.0
        app.kubernetes.io/name: tetragon
        app.kubernetes.io/instance: tetragon
        app.kubernetes.io/managed-by: Helm
    spec:
      serviceAccountName: tetragon
      initContainers:
      - name: tetragon-operator
        image: "quay.io/cilium/tetragon-operator:v0.11.0"
        imagePullPolicy: IfNotPresent
        args:
          - --config-dir=/etc/tetragon/operator.conf.d/
        volumeMounts:
          - mountPath: /etc/tetragon/operator.conf.d/
            name: tetragon-operator-config
            readOnly: true
      containers:
      - name: export-stdout
        image: "quay.io/cilium/hubble-export-stdout:v1.0.3"
        imagePullPolicy: IfNotPresent
        env:
          []
        securityContext:
          {}
        resources:
          {}  
        command:
          - hubble-export-stdout  
        args:
          - /var/run/cilium/tetragon/tetragon.log
        volumeMounts:
          - name: export-logs
            mountPath: /var/run/cilium/tetragon
      - name: tetragon
        securityContext:
          privileged: true
        image: "quay.io/cilium/tetragon:v0.11.0"
        imagePullPolicy: IfNotPresent
        args:
          - --config-dir=/etc/tetragon/tetragon.conf.d/
        volumeMounts:
          - mountPath: /var/lib/tetragon/metadata
            name: metadata-files
          - mountPath: /etc/tetragon/tetragon.conf.d/
            name: tetragon-config
            readOnly: true
          - mountPath: /sys/fs/bpf
            mountPropagation: Bidirectional
            name: bpf-maps
          - mountPath: "/var/run/cilium"
            name: cilium-run
          - mountPath: /var/run/cilium/tetragon
            name: export-logs
          - mountPath: "/procRoot"
            name: host-proc
        env:
          - name: NODE_NAME
            valueFrom:
              fieldRef:
                  fieldPath: spec.nodeName
        livenessProbe:
           exec:
             command:
             - tetra
             - status
             - --server-address
             - localhost:54321
      tolerations:
      - operator: Exists
      hostNetwork: true
      dnsPolicy: Default
      terminationGracePeriodSeconds: 1
      volumes:
      - name: cilium-run
        hostPath:
          path: /var/run/cilium
          type: DirectoryOrCreate
      - name: export-logs
        hostPath:
          path: /var/run/cilium/tetragon
          type: DirectoryOrCreate
      - name: tetragon-config
        configMap:
          name: tetragon-config
      - name: bpf-maps
        hostPath:
          path: /sys/fs/bpf
          type: DirectoryOrCreate
      - name: host-proc
        hostPath:
          path: /proc
          type: Directory
      - emptyDir: {}
        name: metadata-files
      - name: tetragon-operator-config
        configMap:
          name: tetragon-operator-config
